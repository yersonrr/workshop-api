1.- Investigation and Questions

a. Terminology Research

i.- Rest
	The Representational State Transfer (REST) is and architecture style for provide a standar to get data or make operations with the data trought an URL.

ii.- HTTP
	HiperText Transfer Protocol (HTTP) is a communication protocol to share information trought the web between a client and a server.

iii.- TCP/IP
	Transmission Control Protocol/Internet Protocol is the protocol made of the two protocols; this protocols are TCP and IP, the first one is the message part, is using to made a transfer of packages from one computer to another and to separate a big package of data in small parts. In the end of the transfer of data this parts are assembled in the original package in the receiver computer, this protocol is used mainly for maintain the consistency of the package and be sure of all the small packages was received. And second one is the Internet Protocol access, this protocol is assigned to identify every computer connected to internet with an numerical label.

iv.- HTTP Request
	An HTTP Request is a message made from a client and this message is sended to a server in the form of a request message. This message posses various types of methods, the supported methods are GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS and TRACE. 

v.- HTTP Response
	This a message from the server to the client that made the HTTP request. This message tells the client if the request was made succesfully. This response has five classes: informatives responses, succesfull responses, redirects responses, client errors responses and server errors responses.

vi.- REST Resource
	It is the element or the set of elements that can be accessed using an URL that the server supplies. Commonly, when the client receive a JSON, this JSON is a representation of the resource. 

b.- Explain the use of 1XX, 2XX, 3XX, 4XX and 5XX HTTP response codes

1XX - Informational Responses, indicates if an request was received and understood.
2XX - Success Responses, indicates if the message requested by the client was received, understood and accepted
3XX - Redirection Responses, indicates the client must take additional action to complete the request.
4XX - Client errors, used for situations in which the error seems to have been caused by the client.
5XX - Server errors, used when the server is aware that it has encountered an error or is otherwise incapable of performing the request.

c.- How is REST different from other alternatives like RPC or Web Services (WSDLSOAP etc) ?

The RPC and the web services use diferent calls of a function to represent parameters in the URL. This URL is purely incidental and, commonly, has no real bearing on the actual functionality, because the user is calling a different URL each time.
REST models the entities within the problem domain as resources, and uses HTTP request to represent transactions against these resources.
For example POST to create and GET to read. All of these calls, invoked on the same URL, provide different functionality. 

d.- Which software patterns are commonly built with REST API endpoints?

- State-free: The application servers should always be state-free, is necesarily for they can be scaled effortlessly.
- Content Negotiation: For accept multiple representation to be supported for the resources the API needs content negotiation. It is the data representation formats to be accepted or returned by a service capability and is negotiated at runtime as part of its invocation.
- Consumer-Processed Composition: It enables URL composition for the client. Also, it helps the end-users in documenting the URL access patterns.
- Design for Intent: The APIs should not expose the internal business objects. Hence the APIs should be developed to ensure they meet the requirements of the user cases, provided and faced by the clients.
- Versioning: In case the API does not work as expected the developer is expected to make the required modification to the existing version of API. Hence, it is always a good practice to add the version number in the API, to keep track of the API versions.
- Authorization: The RESTful API Design should be able to assign and modify the authorization rights based on the requirements.
- Bulk Operations:  Used when the clients which will issue less requests but these few requests will perform multiple or bulk operations. 
- Pagination: agination: It helps in reducing the amount of data that will be delivered to the client. It also helps the preventing the unnecessary computations to be performed on the application server.
- Unicode: If Unicode characters are used in a URL, it has to be considered while the API is developed.
- Error Logging: The API should ensure that the process of collecting the error messages are streamlined and well defined. It is very important to clearly distinguish between the errors that were caused by incorrect inputs by the clients and the errors which were caused by the API itself and record this errors in separately log files.

e.- (For functional enthusiasts) Find/Research functional practices advantages/disadvantages within an API development context.

Advantages

- All task are Paralelizable.
- All functions are State-free in functional so it is more easier build a REST API endpoint with that pattern.

Disanvantages

- Hard to debugging and profiling.
- Lose threading information.
- Lock Memory constantly.